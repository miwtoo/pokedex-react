{"version":3,"sources":["component/Card.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","text","useState","pokemon","setPokemon","useEffect","axios","get","url","then","res","data","className","name","toUpperCase","slice","types","map","v","type","src","sprites","other","dream_world","front_default","alt","App","pokemons","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAIe,SAASA,EAAKC,GAEzB,IAAD,QAkCiBC,EAlCjB,EAC6BC,mBAAS,IADtC,mBACMC,EADN,KACeC,EADf,KAOD,OALAC,qBAAU,WACRC,IAAMC,IAAIP,EAAMG,QAAQK,KAAKC,MAAK,SAACC,GACjCN,EAAWM,EAAIC,WAEhB,CAACX,EAAMG,QAAQK,MAEhB,qBAAKI,UAAU,yDAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,wCAAf,SACE,sBAAKA,UAAU,MAAf,UACE,+BAsBQX,EAtBSD,EAAMG,QAAQU,KAuBlCZ,EAAK,GAAGa,cAAgBb,EAAKc,MAAM,MAtBhC,qCACGZ,QADH,IACGA,GADH,UACGA,EAASa,aADZ,aACG,EAAgBC,KAAI,SAACC,GAAD,OACnB,sBAAMN,UAAW,4BAAjB,SACGM,EAAEC,KAAKN,iBAMlB,qBAAKD,UAAU,MAAf,SACE,qBACEA,UAAU,wBACVQ,IAAG,UAAEjB,EAAQkB,eAAV,iBAAE,EAAiBC,aAAnB,iBAAE,EAAwBC,mBAA1B,aAAE,EAAqCC,cAC1CC,IAAKzB,EAAMG,QAAQU,cCEhBa,MA7Bf,WAAgB,IAAD,IACkBxB,mBAAS,IAD3B,mBACNyB,EADM,KACIvB,EADJ,KAQb,OANAC,qBAAU,WACRC,IAAMC,IAAI,gDAAgDE,MAAK,SAACC,GAC9DN,EAAWM,EAAIC,WAEhB,IAGD,qCACGgB,QADH,IACGA,GADH,UACGA,EAAUC,eADb,aACG,EAAmBX,KAAI,SAACd,GACvB,OAAO,cAACJ,EAAD,CAAMI,QAASA,GAAcA,EAAQU,YCFrCgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.47caee30.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./card.css\";\n\nexport default function Card(props: {\n  pokemon: { name: string; url: string };\n}) {\n  const [pokemon, setPokemon] = useState({} as Pokemon);\n  useEffect(() => {\n    axios.get(props.pokemon.url).then((res) => {\n      setPokemon(res.data);\n    });\n  }, [props.pokemon.url]);\n  return (\n    <div className=\"my-6 mx-4 shadow-xl bg-white bg-opacity-50 rounded-2xl\">\n      <div className=\"grid grid-cols-2\">\n        <div className=\"bg-gray-300 bg-opacity-90 rounded-2xl\">\n          <div className=\"p-6\">\n            <div>{oneCapital(props.pokemon.name)}</div>\n            <div>\n              {pokemon?.types?.map((v) => (\n                <span className={\"rounded p-1 mr-1 bg-white\"}>\n                  {v.type.name}\n                </span>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className=\"p-6\">\n          <img\n            className=\"filter drop-shadow-lg\"\n            src={pokemon.sprites?.other?.dream_world?.front_default}\n            alt={props.pokemon.name}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction oneCapital(text: string) {\n  return text[0].toUpperCase() + text.slice(1);\n}\n\ntype Pokemon = {\n  sprites: {\n    other: {\n      dream_world: {\n        front_default: string;\n        \"official-artwork\": string;\n      };\n    };\n  };\n  types: [\n    {\n      slot: number;\n      type: {\n        name: string;\n      };\n    }\n  ];\n};\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Card from \"./component/Card\";\n\nfunction App() {\n  const [pokemons, setPokemon] = useState({} as Pokemons);\n  useEffect(() => {\n    axios.get(\" https://pokeapi.co/api/v2/pokemon?limit=151\").then((res) => {\n      setPokemon(res.data as Pokemons);\n    });\n  }, []);\n\n  return (\n    <div>\n      {pokemons?.results?.map((pokemon) => {\n        return <Card pokemon={pokemon} key={pokemon.name}></Card>;\n      })}\n    </div>\n  );\n}\n\nexport interface Result {\n  name: string;\n  url: string;\n}\n\nexport interface Pokemons {\n  count: number;\n  next: string;\n  previous?: any;\n  results: Result[];\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}